syntax = "proto3";

package pb;

option go_package = "dex-stats-sol/pb;pb";

message GetTokenAndMetaByAddressRequest {
  string token_address = 1;
}

message BatchQueryTokenInfoByAddressRequest {
  repeated string token_address = 1;
}

message TokenInfo {
  bytes token_address = 1;
  int32 decimals = 2;
  int32 source = 3;
  string name = 4;
  string symbol = 5;
  string total_supply = 6;
  bytes creator = 7;
  string icon = 8;
  string uri = 9;
  string meta_data = 10;
  string meta_updated_at = 11;
  string creation_time = 12;
  string create_at = 13;
  string update_at = 14;
}

message TokenMetaInfo {
  int64 token_id = 1;
  bytes token_address = 2;
  int32 token_hash = 3;
  bytes primary_pool = 4;
  string max_supply = 5;
  string circulating_supply = 6;
  string description = 7;
  string banner_url = 8;
  string twitter = 9;
  string telegram = 10;
  string website = 11;
  int32 dexscr_ad = 12;
  int32 dexscr_update_link = 13;
  int32 cto_flag = 14;
  string create_at = 15;
  string update_at = 16;
}

message GetTokenAndMetaByAddressResponse {
  TokenInfo info = 1;
  TokenMetaInfo meta = 2;
}

message TokenInfoResponse {
  repeated TokenInfo list = 1;
}

message NameRequest {
  repeated string content = 1;
}

message SupplyRequest {
  repeated string token_address = 1;
}

message SupplyInfo {
  bytes token_address = 1;
  string symbol = 2;
  uint32 decimals = 3;
  string total_supply = 4;
  string max_supply = 5;
  string circulating_supply = 6;
  string icon = 7;
  string name = 8;
}

message SupplyInfos {
  repeated SupplyInfo infos = 1;
}

service Metadata {
  rpc GetTokenAndMetaByAddress(GetTokenAndMetaByAddressRequest) returns(GetTokenAndMetaByAddressResponse);
  rpc BatchQueryTokenInfoByAddress(BatchQueryTokenInfoByAddressRequest) returns(TokenInfoResponse);
  rpc GetTokenSupplyByAddress(SupplyRequest) returns(SupplyInfos);
}
