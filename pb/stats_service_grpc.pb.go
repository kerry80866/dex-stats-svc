// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: stats_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	StatsQueryService_GetRankingList_FullMethodName  = "/pb.StatsQueryService/GetRankingList"
	StatsQueryService_GetTickers_FullMethodName      = "/pb.StatsQueryService/GetTickers"
	StatsQueryService_GetStatsByToken_FullMethodName = "/pb.StatsQueryService/GetStatsByToken"
	StatsQueryService_GetQuotePrices_FullMethodName  = "/pb.StatsQueryService/GetQuotePrices"
)

// StatsQueryServiceClient is the client API for StatsQueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatsQueryServiceClient interface {
	GetRankingList(ctx context.Context, in *GetRankingListRequest, opts ...grpc.CallOption) (*GetRankingListResponse, error)
	GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error)
	GetStatsByToken(ctx context.Context, in *GetStatsByTokenRequest, opts ...grpc.CallOption) (*GetStatsByTokenResponse, error)
	GetQuotePrices(ctx context.Context, in *GetQuotePriceRequest, opts ...grpc.CallOption) (*GetQuotePriceResponse, error)
}

type statsQueryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatsQueryServiceClient(cc grpc.ClientConnInterface) StatsQueryServiceClient {
	return &statsQueryServiceClient{cc}
}

func (c *statsQueryServiceClient) GetRankingList(ctx context.Context, in *GetRankingListRequest, opts ...grpc.CallOption) (*GetRankingListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetRankingListResponse)
	err := c.cc.Invoke(ctx, StatsQueryService_GetRankingList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsQueryServiceClient) GetTickers(ctx context.Context, in *GetTickersRequest, opts ...grpc.CallOption) (*GetTickersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTickersResponse)
	err := c.cc.Invoke(ctx, StatsQueryService_GetTickers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsQueryServiceClient) GetStatsByToken(ctx context.Context, in *GetStatsByTokenRequest, opts ...grpc.CallOption) (*GetStatsByTokenResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetStatsByTokenResponse)
	err := c.cc.Invoke(ctx, StatsQueryService_GetStatsByToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statsQueryServiceClient) GetQuotePrices(ctx context.Context, in *GetQuotePriceRequest, opts ...grpc.CallOption) (*GetQuotePriceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetQuotePriceResponse)
	err := c.cc.Invoke(ctx, StatsQueryService_GetQuotePrices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatsQueryServiceServer is the server API for StatsQueryService service.
// All implementations must embed UnimplementedStatsQueryServiceServer
// for forward compatibility.
type StatsQueryServiceServer interface {
	GetRankingList(context.Context, *GetRankingListRequest) (*GetRankingListResponse, error)
	GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error)
	GetStatsByToken(context.Context, *GetStatsByTokenRequest) (*GetStatsByTokenResponse, error)
	GetQuotePrices(context.Context, *GetQuotePriceRequest) (*GetQuotePriceResponse, error)
	mustEmbedUnimplementedStatsQueryServiceServer()
}

// UnimplementedStatsQueryServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedStatsQueryServiceServer struct{}

func (UnimplementedStatsQueryServiceServer) GetRankingList(context.Context, *GetRankingListRequest) (*GetRankingListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRankingList not implemented")
}
func (UnimplementedStatsQueryServiceServer) GetTickers(context.Context, *GetTickersRequest) (*GetTickersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTickers not implemented")
}
func (UnimplementedStatsQueryServiceServer) GetStatsByToken(context.Context, *GetStatsByTokenRequest) (*GetStatsByTokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStatsByToken not implemented")
}
func (UnimplementedStatsQueryServiceServer) GetQuotePrices(context.Context, *GetQuotePriceRequest) (*GetQuotePriceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuotePrices not implemented")
}
func (UnimplementedStatsQueryServiceServer) mustEmbedUnimplementedStatsQueryServiceServer() {}
func (UnimplementedStatsQueryServiceServer) testEmbeddedByValue()                           {}

// UnsafeStatsQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatsQueryServiceServer will
// result in compilation errors.
type UnsafeStatsQueryServiceServer interface {
	mustEmbedUnimplementedStatsQueryServiceServer()
}

func RegisterStatsQueryServiceServer(s grpc.ServiceRegistrar, srv StatsQueryServiceServer) {
	// If the following call pancis, it indicates UnimplementedStatsQueryServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&StatsQueryService_ServiceDesc, srv)
}

func _StatsQueryService_GetRankingList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRankingListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsQueryServiceServer).GetRankingList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsQueryService_GetRankingList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsQueryServiceServer).GetRankingList(ctx, req.(*GetRankingListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsQueryService_GetTickers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTickersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsQueryServiceServer).GetTickers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsQueryService_GetTickers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsQueryServiceServer).GetTickers(ctx, req.(*GetTickersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsQueryService_GetStatsByToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsByTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsQueryServiceServer).GetStatsByToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsQueryService_GetStatsByToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsQueryServiceServer).GetStatsByToken(ctx, req.(*GetStatsByTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatsQueryService_GetQuotePrices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuotePriceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatsQueryServiceServer).GetQuotePrices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatsQueryService_GetQuotePrices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatsQueryServiceServer).GetQuotePrices(ctx, req.(*GetQuotePriceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatsQueryService_ServiceDesc is the grpc.ServiceDesc for StatsQueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatsQueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.StatsQueryService",
	HandlerType: (*StatsQueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRankingList",
			Handler:    _StatsQueryService_GetRankingList_Handler,
		},
		{
			MethodName: "GetTickers",
			Handler:    _StatsQueryService_GetTickers_Handler,
		},
		{
			MethodName: "GetStatsByToken",
			Handler:    _StatsQueryService_GetStatsByToken_Handler,
		},
		{
			MethodName: "GetQuotePrices",
			Handler:    _StatsQueryService_GetQuotePrices_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stats_service.proto",
}
