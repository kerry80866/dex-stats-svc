// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v5.29.3
// source: snapshot.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SupplyInfoSnapshot struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	CirculatingSupply float64                `protobuf:"fixed64,1,opt,name=circulating_supply,json=circulatingSupply,proto3" json:"circulating_supply,omitempty"` // 当前流通量（以 token 为单位, 非最小单独）
	TotalSupply       float64                `protobuf:"fixed64,2,opt,name=total_supply,json=totalSupply,proto3" json:"total_supply,omitempty"`                   // 已铸造总量（以 token 为单位, 非最小单独）
	MaxSupply         float64                `protobuf:"fixed64,3,opt,name=max_supply,json=maxSupply,proto3" json:"max_supply,omitempty"`                         // 最大可能供应量（以 token 为单位, 非最小单独）
	UpdatedAtTs       uint32                 `protobuf:"varint,4,opt,name=updated_at_ts,json=updatedAtTs,proto3" json:"updated_at_ts,omitempty"`                  // 最后更新时间（秒）
	SupplyBurned      bool                   `protobuf:"varint,5,opt,name=supply_burned,json=supplyBurned,proto3" json:"supply_burned,omitempty"`                 // 是否 BurnedSupply
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *SupplyInfoSnapshot) Reset() {
	*x = SupplyInfoSnapshot{}
	mi := &file_snapshot_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SupplyInfoSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SupplyInfoSnapshot) ProtoMessage() {}

func (x *SupplyInfoSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SupplyInfoSnapshot.ProtoReflect.Descriptor instead.
func (*SupplyInfoSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{0}
}

func (x *SupplyInfoSnapshot) GetCirculatingSupply() float64 {
	if x != nil {
		return x.CirculatingSupply
	}
	return 0
}

func (x *SupplyInfoSnapshot) GetTotalSupply() float64 {
	if x != nil {
		return x.TotalSupply
	}
	return 0
}

func (x *SupplyInfoSnapshot) GetMaxSupply() float64 {
	if x != nil {
		return x.MaxSupply
	}
	return 0
}

func (x *SupplyInfoSnapshot) GetUpdatedAtTs() uint32 {
	if x != nil {
		return x.UpdatedAtTs
	}
	return 0
}

func (x *SupplyInfoSnapshot) GetSupplyBurned() bool {
	if x != nil {
		return x.SupplyBurned
	}
	return false
}

type HolderCountSnapshot struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	BaseCount         int32                  `protobuf:"varint,1,opt,name=base_count,json=baseCount,proto3" json:"base_count,omitempty"`                           // 基准持有人数
	BaseTs            uint32                 `protobuf:"varint,2,opt,name=base_ts,json=baseTs,proto3" json:"base_ts,omitempty"`                                    // 基准时间戳
	DeltaCount        int32                  `protobuf:"varint,3,opt,name=delta_count,json=deltaCount,proto3" json:"delta_count,omitempty"`                        // 增量修正
	LatestBlockNumber uint32                 `protobuf:"varint,4,opt,name=latest_block_number,json=latestBlockNumber,proto3" json:"latest_block_number,omitempty"` // 最新处理 block_number
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *HolderCountSnapshot) Reset() {
	*x = HolderCountSnapshot{}
	mi := &file_snapshot_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *HolderCountSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HolderCountSnapshot) ProtoMessage() {}

func (x *HolderCountSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HolderCountSnapshot.ProtoReflect.Descriptor instead.
func (*HolderCountSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{1}
}

func (x *HolderCountSnapshot) GetBaseCount() int32 {
	if x != nil {
		return x.BaseCount
	}
	return 0
}

func (x *HolderCountSnapshot) GetBaseTs() uint32 {
	if x != nil {
		return x.BaseTs
	}
	return 0
}

func (x *HolderCountSnapshot) GetDeltaCount() int32 {
	if x != nil {
		return x.DeltaCount
	}
	return 0
}

func (x *HolderCountSnapshot) GetLatestBlockNumber() uint32 {
	if x != nil {
		return x.LatestBlockNumber
	}
	return 0
}

type AccountBalanceSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Holder        []byte                 `protobuf:"bytes,1,opt,name=Holder,proto3" json:"Holder,omitempty"`                                       // 持有者地址
	Balance       float64                `protobuf:"fixed64,2,opt,name=balance,proto3" json:"balance,omitempty"`                                   // 以 token 为单位, 非最小单独
	BlockNumber   uint32                 `protobuf:"varint,3,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`         // block_number
	IsPoolAccount bool                   `protobuf:"varint,4,opt,name=is_pool_account,json=isPoolAccount,proto3" json:"is_pool_account,omitempty"` // 是否池子账户
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AccountBalanceSnapshot) Reset() {
	*x = AccountBalanceSnapshot{}
	mi := &file_snapshot_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AccountBalanceSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccountBalanceSnapshot) ProtoMessage() {}

func (x *AccountBalanceSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccountBalanceSnapshot.ProtoReflect.Descriptor instead.
func (*AccountBalanceSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{2}
}

func (x *AccountBalanceSnapshot) GetHolder() []byte {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *AccountBalanceSnapshot) GetBalance() float64 {
	if x != nil {
		return x.Balance
	}
	return 0
}

func (x *AccountBalanceSnapshot) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *AccountBalanceSnapshot) GetIsPoolAccount() bool {
	if x != nil {
		return x.IsPoolAccount
	}
	return false
}

type TopHoldersSnapshot struct {
	state             protoimpl.MessageState    `protogen:"open.v1"`
	Accounts          []*AccountBalanceSnapshot `protobuf:"bytes,1,rep,name=accounts,proto3" json:"accounts,omitempty"`
	LatestBlockNumber uint32                    `protobuf:"varint,2,opt,name=latest_block_number,json=latestBlockNumber,proto3" json:"latest_block_number,omitempty"`
	NeedsSync         bool                      `protobuf:"varint,3,opt,name=needs_sync,json=needsSync,proto3" json:"needs_sync,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *TopHoldersSnapshot) Reset() {
	*x = TopHoldersSnapshot{}
	mi := &file_snapshot_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopHoldersSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopHoldersSnapshot) ProtoMessage() {}

func (x *TopHoldersSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopHoldersSnapshot.ProtoReflect.Descriptor instead.
func (*TopHoldersSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{3}
}

func (x *TopHoldersSnapshot) GetAccounts() []*AccountBalanceSnapshot {
	if x != nil {
		return x.Accounts
	}
	return nil
}

func (x *TopHoldersSnapshot) GetLatestBlockNumber() uint32 {
	if x != nil {
		return x.LatestBlockNumber
	}
	return 0
}

func (x *TopHoldersSnapshot) GetNeedsSync() bool {
	if x != nil {
		return x.NeedsSync
	}
	return false
}

type TokenSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         []byte                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`        // token 地址
	Decimals      uint32                 `protobuf:"varint,2,opt,name=decimals,proto3" json:"decimals,omitempty"` // token 精度
	SupplyInfo    *SupplyInfoSnapshot    `protobuf:"bytes,11,opt,name=supply_info,json=supplyInfo,proto3" json:"supply_info,omitempty"`
	HolderCount   *HolderCountSnapshot   `protobuf:"bytes,21,opt,name=holder_count,json=holderCount,proto3" json:"holder_count,omitempty"`
	TopHolders    *TopHoldersSnapshot    `protobuf:"bytes,31,opt,name=top_holders,json=topHolders,proto3" json:"top_holders,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TokenSnapshot) Reset() {
	*x = TokenSnapshot{}
	mi := &file_snapshot_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TokenSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TokenSnapshot) ProtoMessage() {}

func (x *TokenSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TokenSnapshot.ProtoReflect.Descriptor instead.
func (*TokenSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{4}
}

func (x *TokenSnapshot) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *TokenSnapshot) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *TokenSnapshot) GetSupplyInfo() *SupplyInfoSnapshot {
	if x != nil {
		return x.SupplyInfo
	}
	return nil
}

func (x *TokenSnapshot) GetHolderCount() *HolderCountSnapshot {
	if x != nil {
		return x.HolderCount
	}
	return nil
}

func (x *TokenSnapshot) GetTopHolders() *TopHoldersSnapshot {
	if x != nil {
		return x.TopHolders
	}
	return nil
}

type TickerSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CloseTs       uint32                 `protobuf:"varint,1,opt,name=close_ts,json=closeTs,proto3" json:"close_ts,omitempty"`
	BuyCount      uint32                 `protobuf:"varint,2,opt,name=buy_count,json=buyCount,proto3" json:"buy_count,omitempty"`
	SellCount     uint32                 `protobuf:"varint,3,opt,name=sell_count,json=sellCount,proto3" json:"sell_count,omitempty"`
	BuyVolume     float64                `protobuf:"fixed64,4,opt,name=buy_volume,json=buyVolume,proto3" json:"buy_volume,omitempty"`
	SellVolume    float64                `protobuf:"fixed64,5,opt,name=sell_volume,json=sellVolume,proto3" json:"sell_volume,omitempty"`
	ClosePrice    float64                `protobuf:"fixed64,6,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TickerSnapshot) Reset() {
	*x = TickerSnapshot{}
	mi := &file_snapshot_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickerSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickerSnapshot) ProtoMessage() {}

func (x *TickerSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickerSnapshot.ProtoReflect.Descriptor instead.
func (*TickerSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{5}
}

func (x *TickerSnapshot) GetCloseTs() uint32 {
	if x != nil {
		return x.CloseTs
	}
	return 0
}

func (x *TickerSnapshot) GetBuyCount() uint32 {
	if x != nil {
		return x.BuyCount
	}
	return 0
}

func (x *TickerSnapshot) GetSellCount() uint32 {
	if x != nil {
		return x.SellCount
	}
	return 0
}

func (x *TickerSnapshot) GetBuyVolume() float64 {
	if x != nil {
		return x.BuyVolume
	}
	return 0
}

func (x *TickerSnapshot) GetSellVolume() float64 {
	if x != nil {
		return x.SellVolume
	}
	return 0
}

func (x *TickerSnapshot) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

type TickersSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	OpenPrice     float64                `protobuf:"fixed64,1,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	OpenPriceTs   uint32                 `protobuf:"varint,2,opt,name=open_price_ts,json=openPriceTs,proto3" json:"open_price_ts,omitempty"`
	Tickers       []*TickerSnapshot      `protobuf:"bytes,3,rep,name=tickers,proto3" json:"tickers,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TickersSnapshot) Reset() {
	*x = TickersSnapshot{}
	mi := &file_snapshot_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TickersSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TickersSnapshot) ProtoMessage() {}

func (x *TickersSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TickersSnapshot.ProtoReflect.Descriptor instead.
func (*TickersSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{6}
}

func (x *TickersSnapshot) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *TickersSnapshot) GetOpenPriceTs() uint32 {
	if x != nil {
		return x.OpenPriceTs
	}
	return 0
}

func (x *TickersSnapshot) GetTickers() []*TickerSnapshot {
	if x != nil {
		return x.Tickers
	}
	return nil
}

type PoolSnapshot struct {
	state               protoimpl.MessageState `protogen:"open.v1"`
	Address             []byte                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Dex                 uint32                 `protobuf:"varint,2,opt,name=dex,proto3" json:"dex,omitempty"`
	CreatedAt           uint32                 `protobuf:"varint,3,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	BaseToken           []byte                 `protobuf:"bytes,4,opt,name=base_token,json=baseToken,proto3" json:"base_token,omitempty"`
	QuoteToken          []byte                 `protobuf:"bytes,5,opt,name=quote_token,json=quoteToken,proto3" json:"quote_token,omitempty"`
	BaseDecimals        uint32                 `protobuf:"varint,6,opt,name=base_decimals,json=baseDecimals,proto3" json:"base_decimals,omitempty"`
	QuoteDecimals       uint32                 `protobuf:"varint,7,opt,name=quote_decimals,json=quoteDecimals,proto3" json:"quote_decimals,omitempty"`
	BaseTokenAccount    []byte                 `protobuf:"bytes,8,opt,name=base_token_account,json=baseTokenAccount,proto3" json:"base_token_account,omitempty"`
	QuoteTokenAccount   []byte                 `protobuf:"bytes,9,opt,name=quote_token_account,json=quoteTokenAccount,proto3" json:"quote_token_account,omitempty"`
	BaseTokenLiq        float64                `protobuf:"fixed64,10,opt,name=base_token_liq,json=baseTokenLiq,proto3" json:"base_token_liq,omitempty"`    // 以 token 为单位, 非最小单独
	QuoteTokenLiq       float64                `protobuf:"fixed64,11,opt,name=quote_token_liq,json=quoteTokenLiq,proto3" json:"quote_token_liq,omitempty"` // 以 token 为单位, 非最小单独
	LastChainEventTs    uint32                 `protobuf:"varint,12,opt,name=last_chain_event_ts,json=lastChainEventTs,proto3" json:"last_chain_event_ts,omitempty"`
	LastSwapEventTs     uint32                 `protobuf:"varint,13,opt,name=last_swap_event_ts,json=lastSwapEventTs,proto3" json:"last_swap_event_ts,omitempty"`
	LastPushBlockNumber uint32                 `protobuf:"varint,14,opt,name=last_push_block_number,json=lastPushBlockNumber,proto3" json:"last_push_block_number,omitempty"`
	BlockNumber         uint32                 `protobuf:"varint,15,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockBitmap         []uint64               `protobuf:"varint,16,rep,packed,name=block_bitmap,json=blockBitmap,proto3" json:"block_bitmap,omitempty"`
	Tickers1S           *TickersSnapshot       `protobuf:"bytes,71,opt,name=tickers1s,proto3" json:"tickers1s,omitempty"`
	Tickers1M           *TickersSnapshot       `protobuf:"bytes,81,opt,name=tickers1m,proto3" json:"tickers1m,omitempty"`
	Tickers2M           *TickersSnapshot       `protobuf:"bytes,91,opt,name=tickers2m,proto3" json:"tickers2m,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *PoolSnapshot) Reset() {
	*x = PoolSnapshot{}
	mi := &file_snapshot_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PoolSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PoolSnapshot) ProtoMessage() {}

func (x *PoolSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PoolSnapshot.ProtoReflect.Descriptor instead.
func (*PoolSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{7}
}

func (x *PoolSnapshot) GetAddress() []byte {
	if x != nil {
		return x.Address
	}
	return nil
}

func (x *PoolSnapshot) GetDex() uint32 {
	if x != nil {
		return x.Dex
	}
	return 0
}

func (x *PoolSnapshot) GetCreatedAt() uint32 {
	if x != nil {
		return x.CreatedAt
	}
	return 0
}

func (x *PoolSnapshot) GetBaseToken() []byte {
	if x != nil {
		return x.BaseToken
	}
	return nil
}

func (x *PoolSnapshot) GetQuoteToken() []byte {
	if x != nil {
		return x.QuoteToken
	}
	return nil
}

func (x *PoolSnapshot) GetBaseDecimals() uint32 {
	if x != nil {
		return x.BaseDecimals
	}
	return 0
}

func (x *PoolSnapshot) GetQuoteDecimals() uint32 {
	if x != nil {
		return x.QuoteDecimals
	}
	return 0
}

func (x *PoolSnapshot) GetBaseTokenAccount() []byte {
	if x != nil {
		return x.BaseTokenAccount
	}
	return nil
}

func (x *PoolSnapshot) GetQuoteTokenAccount() []byte {
	if x != nil {
		return x.QuoteTokenAccount
	}
	return nil
}

func (x *PoolSnapshot) GetBaseTokenLiq() float64 {
	if x != nil {
		return x.BaseTokenLiq
	}
	return 0
}

func (x *PoolSnapshot) GetQuoteTokenLiq() float64 {
	if x != nil {
		return x.QuoteTokenLiq
	}
	return 0
}

func (x *PoolSnapshot) GetLastChainEventTs() uint32 {
	if x != nil {
		return x.LastChainEventTs
	}
	return 0
}

func (x *PoolSnapshot) GetLastSwapEventTs() uint32 {
	if x != nil {
		return x.LastSwapEventTs
	}
	return 0
}

func (x *PoolSnapshot) GetLastPushBlockNumber() uint32 {
	if x != nil {
		return x.LastPushBlockNumber
	}
	return 0
}

func (x *PoolSnapshot) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *PoolSnapshot) GetBlockBitmap() []uint64 {
	if x != nil {
		return x.BlockBitmap
	}
	return nil
}

func (x *PoolSnapshot) GetTickers1S() *TickersSnapshot {
	if x != nil {
		return x.Tickers1S
	}
	return nil
}

func (x *PoolSnapshot) GetTickers1M() *TickersSnapshot {
	if x != nil {
		return x.Tickers1M
	}
	return nil
}

func (x *PoolSnapshot) GetTickers2M() *TickersSnapshot {
	if x != nil {
		return x.Tickers2M
	}
	return nil
}

type QuotePriceProto struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Token         []byte                 `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	Price         float64                `protobuf:"fixed64,2,opt,name=price,proto3" json:"price,omitempty"` // 美元价格
	Decimals      uint32                 `protobuf:"varint,3,opt,name=decimals,proto3" json:"decimals,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotePriceProto) Reset() {
	*x = QuotePriceProto{}
	mi := &file_snapshot_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotePriceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotePriceProto) ProtoMessage() {}

func (x *QuotePriceProto) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotePriceProto.ProtoReflect.Descriptor instead.
func (*QuotePriceProto) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{8}
}

func (x *QuotePriceProto) GetToken() []byte {
	if x != nil {
		return x.Token
	}
	return nil
}

func (x *QuotePriceProto) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *QuotePriceProto) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

type QuotePriceSnapshot struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	BlockNumber   uint32                 `protobuf:"varint,1,opt,name=block_number,json=blockNumber,proto3" json:"block_number,omitempty"`
	BlockTime     uint32                 `protobuf:"varint,2,opt,name=block_time,json=blockTime,proto3" json:"block_time,omitempty"`
	Prices        []*QuotePriceProto     `protobuf:"bytes,3,rep,name=prices,proto3" json:"prices,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *QuotePriceSnapshot) Reset() {
	*x = QuotePriceSnapshot{}
	mi := &file_snapshot_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *QuotePriceSnapshot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QuotePriceSnapshot) ProtoMessage() {}

func (x *QuotePriceSnapshot) ProtoReflect() protoreflect.Message {
	mi := &file_snapshot_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QuotePriceSnapshot.ProtoReflect.Descriptor instead.
func (*QuotePriceSnapshot) Descriptor() ([]byte, []int) {
	return file_snapshot_proto_rawDescGZIP(), []int{9}
}

func (x *QuotePriceSnapshot) GetBlockNumber() uint32 {
	if x != nil {
		return x.BlockNumber
	}
	return 0
}

func (x *QuotePriceSnapshot) GetBlockTime() uint32 {
	if x != nil {
		return x.BlockTime
	}
	return 0
}

func (x *QuotePriceSnapshot) GetPrices() []*QuotePriceProto {
	if x != nil {
		return x.Prices
	}
	return nil
}

var File_snapshot_proto protoreflect.FileDescriptor

const file_snapshot_proto_rawDesc = "" +
	"\n" +
	"\x0esnapshot.proto\x12\x02pb\"\xce\x01\n" +
	"\x12SupplyInfoSnapshot\x12-\n" +
	"\x12circulating_supply\x18\x01 \x01(\x01R\x11circulatingSupply\x12!\n" +
	"\ftotal_supply\x18\x02 \x01(\x01R\vtotalSupply\x12\x1d\n" +
	"\n" +
	"max_supply\x18\x03 \x01(\x01R\tmaxSupply\x12\"\n" +
	"\rupdated_at_ts\x18\x04 \x01(\rR\vupdatedAtTs\x12#\n" +
	"\rsupply_burned\x18\x05 \x01(\bR\fsupplyBurned\"\x9e\x01\n" +
	"\x13HolderCountSnapshot\x12\x1d\n" +
	"\n" +
	"base_count\x18\x01 \x01(\x05R\tbaseCount\x12\x17\n" +
	"\abase_ts\x18\x02 \x01(\rR\x06baseTs\x12\x1f\n" +
	"\vdelta_count\x18\x03 \x01(\x05R\n" +
	"deltaCount\x12.\n" +
	"\x13latest_block_number\x18\x04 \x01(\rR\x11latestBlockNumber\"\x95\x01\n" +
	"\x16AccountBalanceSnapshot\x12\x16\n" +
	"\x06Holder\x18\x01 \x01(\fR\x06Holder\x12\x18\n" +
	"\abalance\x18\x02 \x01(\x01R\abalance\x12!\n" +
	"\fblock_number\x18\x03 \x01(\rR\vblockNumber\x12&\n" +
	"\x0fis_pool_account\x18\x04 \x01(\bR\risPoolAccount\"\x9b\x01\n" +
	"\x12TopHoldersSnapshot\x126\n" +
	"\baccounts\x18\x01 \x03(\v2\x1a.pb.AccountBalanceSnapshotR\baccounts\x12.\n" +
	"\x13latest_block_number\x18\x02 \x01(\rR\x11latestBlockNumber\x12\x1d\n" +
	"\n" +
	"needs_sync\x18\x03 \x01(\bR\tneedsSync\"\xef\x01\n" +
	"\rTokenSnapshot\x12\x14\n" +
	"\x05token\x18\x01 \x01(\fR\x05token\x12\x1a\n" +
	"\bdecimals\x18\x02 \x01(\rR\bdecimals\x127\n" +
	"\vsupply_info\x18\v \x01(\v2\x16.pb.SupplyInfoSnapshotR\n" +
	"supplyInfo\x12:\n" +
	"\fholder_count\x18\x15 \x01(\v2\x17.pb.HolderCountSnapshotR\vholderCount\x127\n" +
	"\vtop_holders\x18\x1f \x01(\v2\x16.pb.TopHoldersSnapshotR\n" +
	"topHolders\"\xc8\x01\n" +
	"\x0eTickerSnapshot\x12\x19\n" +
	"\bclose_ts\x18\x01 \x01(\rR\acloseTs\x12\x1b\n" +
	"\tbuy_count\x18\x02 \x01(\rR\bbuyCount\x12\x1d\n" +
	"\n" +
	"sell_count\x18\x03 \x01(\rR\tsellCount\x12\x1d\n" +
	"\n" +
	"buy_volume\x18\x04 \x01(\x01R\tbuyVolume\x12\x1f\n" +
	"\vsell_volume\x18\x05 \x01(\x01R\n" +
	"sellVolume\x12\x1f\n" +
	"\vclose_price\x18\x06 \x01(\x01R\n" +
	"closePrice\"\x82\x01\n" +
	"\x0fTickersSnapshot\x12\x1d\n" +
	"\n" +
	"open_price\x18\x01 \x01(\x01R\topenPrice\x12\"\n" +
	"\ropen_price_ts\x18\x02 \x01(\rR\vopenPriceTs\x12,\n" +
	"\atickers\x18\x03 \x03(\v2\x12.pb.TickerSnapshotR\atickers\"\x81\x06\n" +
	"\fPoolSnapshot\x12\x18\n" +
	"\aaddress\x18\x01 \x01(\fR\aaddress\x12\x10\n" +
	"\x03dex\x18\x02 \x01(\rR\x03dex\x12\x1d\n" +
	"\n" +
	"created_at\x18\x03 \x01(\rR\tcreatedAt\x12\x1d\n" +
	"\n" +
	"base_token\x18\x04 \x01(\fR\tbaseToken\x12\x1f\n" +
	"\vquote_token\x18\x05 \x01(\fR\n" +
	"quoteToken\x12#\n" +
	"\rbase_decimals\x18\x06 \x01(\rR\fbaseDecimals\x12%\n" +
	"\x0equote_decimals\x18\a \x01(\rR\rquoteDecimals\x12,\n" +
	"\x12base_token_account\x18\b \x01(\fR\x10baseTokenAccount\x12.\n" +
	"\x13quote_token_account\x18\t \x01(\fR\x11quoteTokenAccount\x12$\n" +
	"\x0ebase_token_liq\x18\n" +
	" \x01(\x01R\fbaseTokenLiq\x12&\n" +
	"\x0fquote_token_liq\x18\v \x01(\x01R\rquoteTokenLiq\x12-\n" +
	"\x13last_chain_event_ts\x18\f \x01(\rR\x10lastChainEventTs\x12+\n" +
	"\x12last_swap_event_ts\x18\r \x01(\rR\x0flastSwapEventTs\x123\n" +
	"\x16last_push_block_number\x18\x0e \x01(\rR\x13lastPushBlockNumber\x12!\n" +
	"\fblock_number\x18\x0f \x01(\rR\vblockNumber\x12!\n" +
	"\fblock_bitmap\x18\x10 \x03(\x04R\vblockBitmap\x121\n" +
	"\ttickers1s\x18G \x01(\v2\x13.pb.TickersSnapshotR\ttickers1s\x121\n" +
	"\ttickers1m\x18Q \x01(\v2\x13.pb.TickersSnapshotR\ttickers1m\x121\n" +
	"\ttickers2m\x18[ \x01(\v2\x13.pb.TickersSnapshotR\ttickers2m\"Y\n" +
	"\x0fQuotePriceProto\x12\x14\n" +
	"\x05token\x18\x01 \x01(\fR\x05token\x12\x14\n" +
	"\x05price\x18\x02 \x01(\x01R\x05price\x12\x1a\n" +
	"\bdecimals\x18\x03 \x01(\rR\bdecimals\"\x83\x01\n" +
	"\x12QuotePriceSnapshot\x12!\n" +
	"\fblock_number\x18\x01 \x01(\rR\vblockNumber\x12\x1d\n" +
	"\n" +
	"block_time\x18\x02 \x01(\rR\tblockTime\x12+\n" +
	"\x06prices\x18\x03 \x03(\v2\x13.pb.QuotePriceProtoR\x06pricesB\x15Z\x13dex-stats-sol/pb;pbb\x06proto3"

var (
	file_snapshot_proto_rawDescOnce sync.Once
	file_snapshot_proto_rawDescData []byte
)

func file_snapshot_proto_rawDescGZIP() []byte {
	file_snapshot_proto_rawDescOnce.Do(func() {
		file_snapshot_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_snapshot_proto_rawDesc), len(file_snapshot_proto_rawDesc)))
	})
	return file_snapshot_proto_rawDescData
}

var file_snapshot_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_snapshot_proto_goTypes = []any{
	(*SupplyInfoSnapshot)(nil),     // 0: pb.SupplyInfoSnapshot
	(*HolderCountSnapshot)(nil),    // 1: pb.HolderCountSnapshot
	(*AccountBalanceSnapshot)(nil), // 2: pb.AccountBalanceSnapshot
	(*TopHoldersSnapshot)(nil),     // 3: pb.TopHoldersSnapshot
	(*TokenSnapshot)(nil),          // 4: pb.TokenSnapshot
	(*TickerSnapshot)(nil),         // 5: pb.TickerSnapshot
	(*TickersSnapshot)(nil),        // 6: pb.TickersSnapshot
	(*PoolSnapshot)(nil),           // 7: pb.PoolSnapshot
	(*QuotePriceProto)(nil),        // 8: pb.QuotePriceProto
	(*QuotePriceSnapshot)(nil),     // 9: pb.QuotePriceSnapshot
}
var file_snapshot_proto_depIdxs = []int32{
	2, // 0: pb.TopHoldersSnapshot.accounts:type_name -> pb.AccountBalanceSnapshot
	0, // 1: pb.TokenSnapshot.supply_info:type_name -> pb.SupplyInfoSnapshot
	1, // 2: pb.TokenSnapshot.holder_count:type_name -> pb.HolderCountSnapshot
	3, // 3: pb.TokenSnapshot.top_holders:type_name -> pb.TopHoldersSnapshot
	5, // 4: pb.TickersSnapshot.tickers:type_name -> pb.TickerSnapshot
	6, // 5: pb.PoolSnapshot.tickers1s:type_name -> pb.TickersSnapshot
	6, // 6: pb.PoolSnapshot.tickers1m:type_name -> pb.TickersSnapshot
	6, // 7: pb.PoolSnapshot.tickers2m:type_name -> pb.TickersSnapshot
	8, // 8: pb.QuotePriceSnapshot.prices:type_name -> pb.QuotePriceProto
	9, // [9:9] is the sub-list for method output_type
	9, // [9:9] is the sub-list for method input_type
	9, // [9:9] is the sub-list for extension type_name
	9, // [9:9] is the sub-list for extension extendee
	0, // [0:9] is the sub-list for field type_name
}

func init() { file_snapshot_proto_init() }
func file_snapshot_proto_init() {
	if File_snapshot_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_snapshot_proto_rawDesc), len(file_snapshot_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_snapshot_proto_goTypes,
		DependencyIndexes: file_snapshot_proto_depIdxs,
		MessageInfos:      file_snapshot_proto_msgTypes,
	}.Build()
	File_snapshot_proto = out.File
	file_snapshot_proto_goTypes = nil
	file_snapshot_proto_depIdxs = nil
}
