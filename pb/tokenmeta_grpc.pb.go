// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: tokenmeta.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Metadata_GetTokenAndMetaByAddress_FullMethodName     = "/pb.Metadata/GetTokenAndMetaByAddress"
	Metadata_BatchQueryTokenInfoByAddress_FullMethodName = "/pb.Metadata/BatchQueryTokenInfoByAddress"
	Metadata_GetTokenSupplyByAddress_FullMethodName      = "/pb.Metadata/GetTokenSupplyByAddress"
)

// MetadataClient is the client API for Metadata service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetadataClient interface {
	GetTokenAndMetaByAddress(ctx context.Context, in *GetTokenAndMetaByAddressRequest, opts ...grpc.CallOption) (*GetTokenAndMetaByAddressResponse, error)
	BatchQueryTokenInfoByAddress(ctx context.Context, in *BatchQueryTokenInfoByAddressRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error)
	GetTokenSupplyByAddress(ctx context.Context, in *SupplyRequest, opts ...grpc.CallOption) (*SupplyInfos, error)
}

type metadataClient struct {
	cc grpc.ClientConnInterface
}

func NewMetadataClient(cc grpc.ClientConnInterface) MetadataClient {
	return &metadataClient{cc}
}

func (c *metadataClient) GetTokenAndMetaByAddress(ctx context.Context, in *GetTokenAndMetaByAddressRequest, opts ...grpc.CallOption) (*GetTokenAndMetaByAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetTokenAndMetaByAddressResponse)
	err := c.cc.Invoke(ctx, Metadata_GetTokenAndMetaByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) BatchQueryTokenInfoByAddress(ctx context.Context, in *BatchQueryTokenInfoByAddressRequest, opts ...grpc.CallOption) (*TokenInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TokenInfoResponse)
	err := c.cc.Invoke(ctx, Metadata_BatchQueryTokenInfoByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metadataClient) GetTokenSupplyByAddress(ctx context.Context, in *SupplyRequest, opts ...grpc.CallOption) (*SupplyInfos, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SupplyInfos)
	err := c.cc.Invoke(ctx, Metadata_GetTokenSupplyByAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetadataServer is the server API for Metadata service.
// All implementations must embed UnimplementedMetadataServer
// for forward compatibility.
type MetadataServer interface {
	GetTokenAndMetaByAddress(context.Context, *GetTokenAndMetaByAddressRequest) (*GetTokenAndMetaByAddressResponse, error)
	BatchQueryTokenInfoByAddress(context.Context, *BatchQueryTokenInfoByAddressRequest) (*TokenInfoResponse, error)
	GetTokenSupplyByAddress(context.Context, *SupplyRequest) (*SupplyInfos, error)
	mustEmbedUnimplementedMetadataServer()
}

// UnimplementedMetadataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMetadataServer struct{}

func (UnimplementedMetadataServer) GetTokenAndMetaByAddress(context.Context, *GetTokenAndMetaByAddressRequest) (*GetTokenAndMetaByAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenAndMetaByAddress not implemented")
}
func (UnimplementedMetadataServer) BatchQueryTokenInfoByAddress(context.Context, *BatchQueryTokenInfoByAddressRequest) (*TokenInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BatchQueryTokenInfoByAddress not implemented")
}
func (UnimplementedMetadataServer) GetTokenSupplyByAddress(context.Context, *SupplyRequest) (*SupplyInfos, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTokenSupplyByAddress not implemented")
}
func (UnimplementedMetadataServer) mustEmbedUnimplementedMetadataServer() {}
func (UnimplementedMetadataServer) testEmbeddedByValue()                  {}

// UnsafeMetadataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetadataServer will
// result in compilation errors.
type UnsafeMetadataServer interface {
	mustEmbedUnimplementedMetadataServer()
}

func RegisterMetadataServer(s grpc.ServiceRegistrar, srv MetadataServer) {
	// If the following call pancis, it indicates UnimplementedMetadataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Metadata_ServiceDesc, srv)
}

func _Metadata_GetTokenAndMetaByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenAndMetaByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetTokenAndMetaByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetTokenAndMetaByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetTokenAndMetaByAddress(ctx, req.(*GetTokenAndMetaByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_BatchQueryTokenInfoByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BatchQueryTokenInfoByAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).BatchQueryTokenInfoByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_BatchQueryTokenInfoByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).BatchQueryTokenInfoByAddress(ctx, req.(*BatchQueryTokenInfoByAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Metadata_GetTokenSupplyByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SupplyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetadataServer).GetTokenSupplyByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Metadata_GetTokenSupplyByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetadataServer).GetTokenSupplyByAddress(ctx, req.(*SupplyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Metadata_ServiceDesc is the grpc.ServiceDesc for Metadata service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metadata_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Metadata",
	HandlerType: (*MetadataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTokenAndMetaByAddress",
			Handler:    _Metadata_GetTokenAndMetaByAddress_Handler,
		},
		{
			MethodName: "BatchQueryTokenInfoByAddress",
			Handler:    _Metadata_BatchQueryTokenInfoByAddress_Handler,
		},
		{
			MethodName: "GetTokenSupplyByAddress",
			Handler:    _Metadata_GetTokenSupplyByAddress_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tokenmeta.proto",
}
